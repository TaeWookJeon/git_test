# 키보드로부터 입력을 받아 해당 문자열을 출력하고 길이를 구하세요
input_str = input("문자 입력")
print("입력받은 문자 :", input_str)
print("입력받은 문자열의 길이는 : ", len(input_str))
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
문자 입력abcd tesdf fagda
입력받은 문자 : abcd tesdf fagda
입력받은 문자열의 길이는 :  16
====================================
# format : {}에 값을 대입함
print("{}".format(10))    # 10
print("{} {} {}".format(10,'test', 20))

print("입력받은 문자 : {}, 문자열의 길이는 : {}".format(input_str, len(input_str)))
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
10
10 test 20
입력받은 문자 : abcd tesdf fagda, 문자열의 길이는 : 16
======================================
# 정수 자릿수 지정하기
num_1 =52
print("{:d}".format(num_1))
print("{:5d}".format(num_1))
print("{:5d}".format(num_1 * -1))
print("{:05d}".format(num_1))
print("{:05d}".format(num_1 * -1))
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
52
   52
  -52
00052
-0052
======================================
# 부호 붙이기
print("{:+d}".format(num_1))  # 52
print("{:+d}".format(num_1 * -1))   #-52
print("{: d}".format(num_1))    # 52 양수는 부호 안붙임
print("{: d}".format(num_1 * -1)) # -52 음수는 부호 붙임
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
+52
-52
 52
-52
======================================
# 조합하기
print("{:+5d}".format(num_1))     #     +52
print("{:+5d}".format(num_1 * -1)) #     -52
print("{:=+5d}".format(num_1))      # +   52 
print("{:=+5d}".format(num_1 * -1)) # -   52
print("{:=+05d}".format(num_1))     # +0052
print("{:=+05d}".format(num_1 * -1)) # -0052
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  +52
  -52
+  52
-  52
+0052
-0052
======================================
# 부동 소수점 출력 {:f}
num_f = 52.273
print("{:f}".format(num_f))  # 52.273000
print("{:15f}".format(num_f)) #     52.273000 전체 표현하는 자리수가 15자리
print("{:+15f}".format(num_f))
print("{:+015f}".format(num_f))

#소수점 미만 표현 자리수 지정
print("{:15.3f}".format(num_f))   # 전체 표현 자리수는 15, 소숫점 미만 3자리

# 의미없는 소수점 제거하기
print("{:g}".format(10.0))      # 10을 출력
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
52.273000
      52.273000
     +52.273000
+0000052.273000
         52.273
10
======================================
# upper(), lower(),  strip() : 공백 제거 => 문자열.함수명()

str_a = '   Hello World !!   '
print(str_a.upper())   # 대문자로
print(str_a.lower())   # 소문자로
print(str_a.strip())   # 양쪽 공백제거  
print(str_a.lstrip())  # 왼쪽 공백제거
print(str_a.rstrip())  # 오른쪽 공백제거

# 소문자로 바꿔서 공백 제거
str_a.lower().strip().upper().lower()    # 문자열을 계속 붙일 수 있다. lower<->strip 순서를 바꿔도 됨.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   HELLO WORLD !!   
   hello world !!   
Hello World !!
Hello World !!   
   Hello World !!
'hello world !!'
======================================
# 문자열 구성 파악하기 is00() => True or False
print("Translate".isalnum())   # True
print("10".isdigit())          # True

print("  im A port".islower())
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
True
True
False
======================================
# find(), rfind() : 찾고자 하는 문자열의 위치(index) 반환
input_str = "abcd hellohello python"  # 처음 나오는 hello를 추출해서 출력
start_p = input_str.find("hello")     # 처음 hello가 나오는 index 반환
end_p = input_str.rfind("hello")      # 뒤에서 부터 검색해서 처음 나오는 index

print("시작 위치 :{}, 마지막 위치 :{}, {}".format(start_p, end_p, input_str[start_p : end_p]))

# 마지막 위치의 hello부터 뒤에 있는 문자 모두 출력
print(input_str[end_p:])
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
시작 위치 :5, 마지막 위치 :10, hello
hello python
======================================
# 키보드에서 공백 포함해서 문자열을 입력 받아
# 처음 공백 나오는 위치까지의 문자만 출력 abcd test => abcd만 출력
input_str = input('문자열 입력 >')

print(input_str); print()
print(input_str[ : input_str.find(' ')])

# 함수명() : len(), print(), type()
# 오브젝트.함수명() -> 클래스 ( 멤버변수, 메서드(함수)) => str.upper(), ...
#                       str.format()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
문자열 입력 >abcd test
abcd test

abcd
======================================
# 문자열 자르기 문자열.split()  => list로 반환
a_str = "10 20 30 40 test abcd"
print(a_str.split())
b_str = "10,20 30,40,test,abcd"
print(b_str.split(','))

( ',' in "10,20 30,40,test,abcd")   # True or False
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
['10', '20', '30', '40', 'test', 'abcd']
['10', '20 30', '40', 'test', 'abcd']
True
======================================
# 키보드로부터 데이터를 입력받아 공백으로 데이터를 분리하고
# 2번째 입력된 자료를 출력하세요
# abcd test c 10 30     => test를 출력
input_str = input(" intput data >")
input_split = input_str.split()
print(input_str, '\t 2번째 입력 자료 :', input_split[1])
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 intput data >abcd test c 10 30
abcd test c 10 30 	 2번째 입력 자료 : test
======================================
# and, or, not, ==, !=, >, <, <=, >=
a = 10; b = 20
print(a == b)   # False
print(a != b)   # True
print(a < b)    # True
print(a > b)    # False
print(a <= b)   # True
print(a >= b)   # False
print(a == 10 and b == 20)   # True
print(a != 10 and b == 20)   # False
print(a == 10 and b != 20)   # False
print(a != 10 and b != 20)   # False
print(a == 10 or b == 20)    # True
print(a != 10 or b == 20)    # True
print(a == 10 or b != 20)    # True
print(a != 10 or b != 20)    # False
print(not ( a != 10 or b != 20)) # True
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
False
True
True
False
True
False
True
False
False
False
True
True
True
False
True
======================================
# if 조건식: 
#    들여쓰기
if True:
    print("if 문장 실행")    # 실행 됨
    
if False:
    print("if False 실행")   # 실행되지 않음
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
if 문장 실행
======================================
# 정수를 입력받아 10보다 작으면 입력된 값 출력
# 1. 정수 입력 받음
# 2. 숫자인지 확인  isdecimal()
# 3. 숫자이면 문자를 숫자로 변경
# 4. 10보다 작으면 출력

input_num = input("정수 입력 > ")

if not input_num.isdecimal():
    print('숫자가 아닙니다')

if input_num.isdecimal():           # 입력된 자료(문자열)가 숫자인지 확인
    input_num = int(input_num)      # 입력된 자료를 int로 데이터 타입 변경
    if input_num < 10:              # 입력된 숫자가 10보다 작으면
        print("input_num : {:+5d}".format(input_num))
    if input_num >=10 :
        print('10보다 크거나 같습니다')
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
정수 입력 > 4
input_num :    +4
======================================
# 숫자를 입력받아 실수(float)로 변환한 후 0보다
# 0보다 크면 '양수', 0보다 작으면 '음수', 0면 'zero'를 출력 하세요
input_num = float(input("실수 입력 > "))
if input_num > 0 :
    print("양수")
if input_num < 0 :
    print("음수")
if not input_num :    # 숫자인 경우 0이면 False, 문자인: None인 경우 False
    print("Zero")
a = ''
if not a:
    print("a는 False")
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
실수 입력 > 0
Zero
a는 False
======================================
# 날짜 시간 관련 함수를 사용하기 위해서 datetime 모듈 가져오기
import datetime
======================================
now = datetime.datetime.now()

print("{}년 {}월 {}일 {}시 {}분 {}초".format(
now.year, now.month, now.day, now.hour, now.minute, now.second))
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
2021년 10월 29일 14시 10분 14초
======================================
# 정수 입력 받아 짝수인지 확인     # 마지막 입력된 숫자가  0, 2, 4, 6, 8
input_num = input("정수 입력 > ")
last_char = input_num[-1]    # 마지막 글자 가져 옴
last_num = int(last_char)    # 정수형으로 데이터 타입 변경
if last_num == 0 or last_num == 2 or last_num == 4 \
 or last_num == 6 or last_num == 8:
    print("짝수 입니다")
    
if last_num == 1 or last_num == 3 or last_num == 5 \
 or last_num == 7 or last_num == 9:
    print("홀수 입니다")
    
# int로 형 변환후 2로 나눈 나머지 값이 0면 짝수 1이면 홀수
input_num1 = int(input_num)
if not input_num1 % 2:
    print("짝수 입니다")
if input_num1 % 2:
    print("홀수 입니다")
    
# in 연산자를 활용하여 처리
if last_char in "02468":
    print("짝수 입니다")
if last_char in "13579":
    print("홀수 입니다")
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
정수 입력 > 4567
홀수 입니다
홀수 입니다
홀수 입니다
======================================
# 1. 한번에 두 개의 숫자를 입력받아 작은수 부터 출력
# 2. 작은 수와 큰 수가 각각에 대하여
# 3의 배수이면 , '3의 배수', 아니면 '3의 배수가 아닙니다'
# 57 34 입력 -> 입력된 숫자는 34와 57입니다
# 34는 3의 배수가 아닙니다. 57은 3의 배수입니다
input_number = input("두 개의 정수 입력 > ")
#input_number = input_number.split()
number_1 = int(input_number.split()[0]) # 처음 입력된 숫자
number_2 = int(input_number.split()[1]) # 두번째 입력된 숫자

if number_1 < number_2:
    print("입력된 숫자는 {}와 {}입니다".format(number_1, number_2))
if number_1 >= number_2:
    print("입력된 숫자는 {}와 {}입니다".format(number_2,  number_1))
if number_1 % 3:
    print("{}는 3의 배수가 아닙니다".format(number_1))
if number_1 % 3 ==0 :
    print("{}는 3의 배수입니다".format(number_1));
    
if number_2 % 3:
    print("{}는 3의 배수가 아닙니다".format(number_2))
if number_2 % 3 ==0 :
    print("{}는 3의 배수입니다".format(number_2));
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
두 개의 정수 입력 > 57 34
입력된 숫자는 34와 57입니다
57는 3의 배수입니다
34는 3의 배수가 아닙니다
======================================
# 다른 방법
input_number = input("두 개의 정수 입력 > ")

number_1 = int(input_number.split()[0]) # 처음 입력된 숫자
number_2 = int(input_number.split()[1]) # 두번째 입력된 숫자

if number_1 < number_2:
    a = number_1
    b = number_2
if number_1 >= number_2:
    a = number_2
    b = number_1 
print("입력된 숫자는 {}와 {}입니다".format(a,b))

if a % 3:
    if b % 3:
        print("{}와 {}는 3의 배수가 아닙니다".format(a,b))
    if b % 3 == 0:
        print("{}는 3의 배수가 아니고 {}는 3의 배수 입니다".format(a,b))
if a % 3 ==0 :
    if b % 3:
        print("{}는 3의 배수이고, {}는 3의 배수가 아닙니다".format(a,b))
    if b % 3 == 0:
        print("{}와 {}는 3의 배수 입니다".format(a,b))
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
두 개의 정수 입력 > 57 34
입력된 숫자는 34와 57입니다
34는 3의 배수가 아니고 57는 3의 배수 입니다
======================================
# 정수를 입력받아 90이상이면 'A', 80이상이면 'B', 70이상이면 'C', 그 외 '0'
# if, if ~ else, if ~ elif ~ elif ~ ...else 
input_number = int(input("점수 입력 > "))

if input_number >= 90:
    print('A')
elif input_number >= 80:
    print('B')
elif input_number >= 70:
    print('C')
else:
    print('D')
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
점수 입력 > 100
A
======================================
# 날짜 함수에서 월을 추출해서 현재 월이 봄인지, 가을인지 출력
# 1~3월은 봄 4~6월은 여름 7~9월은 가을 10~12월은 겨울 이라고 출력
# if ~ elif ~... else
import datetime

now = datetime.datetime.now()
#now = datetime.date.today() => 년 월 일

if 1 <= now.month <=3:
    print('봄')
elif 4 <= now.month <=6:
    print('여름')
elif 7 <= now. month <=9:
    #print('가을')
    pass
else: 
    #print('겨울')
    raise NotimplementError
now
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
NameError                                 Traceback (most recent call last)
<ipython-input-9-2ae9a7110d6c> in <module>
     16 else:
     17     #print('겨울')
---> 18     raise NotimplementError
     19 now

NameError: name 'NotimplementError' is not defined
======================================
# 숫자 부호 숫자를 입력받아 계산하는 프로그램 작성
# 10 + 20, 10-20, 부호는 +, -, *, / 를 입력하세요
# 10 + 20 = 30 이러한 형식으로 출력
input_str = input("계산할 식 입력 ( 형식: 10 + 20)>")
number_1 = int(input_str.split()[0])
buho = input_str.split()[1]
number_2 = int(input_str.split()[2])

if buho == '+':
    result = number_1 + number_2
elif buho == '-':
    result = number_1 - number_2
elif buho == '*':
    result = number_1 * number_2
elif buho == '/':
    if number_2:
            result = number_1 / number_2
    else:
        print("0 이외의 수를 입력하세요")
else:
    print("부호는 +, -, *, / 만 가능합니다")
        
if number_2 and buho in '+-*/':
    print("{} {} {} = {}".format(number_1, buho, number_2, result))
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
계산할 식 입력 ( 형식: 10 + 20)>30 ^ 30
부호는 +, -, *, / 만 가능합니다
======================================
# list 여러개의 데이터 집합 변수명 = [ , , ... , ]
# +, *, len() 리스트의 갯수
# list.append(요소), list,insert(위치,요소), list.extend(라스트) 라스트 연결
a_list = [1,2,3]
b_list = ['a','b','c']
print("a_list + b_list : ", a_list + b_list)
print("a_list * 3 :", a_list * 3) # a_list를 3번 반복
c_list = a_list + b_list
print("a_list갯수:{}, b_list갯수:{}, c_list갯수{}".format(len(a_list), len(b_list), len(c_list)))

a_list.append(b_list) # 마지막 위치에 b_list 추가
print(a_list)
# a_list의 'a'를 출력
print(a_list[3][0])

a_list.insert(1,c_list) # a_list의 1 인덱스 위치에 c_list 추가
a_list
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
a_list + b_list :  [1, 2, 3, 'a', 'b', 'c']
a_list * 3 : [1, 2, 3, 1, 2, 3, 1, 2, 3]
a_list갯수:3, b_list갯수:3, c_list갯수6
[1, 2, 3, ['a', 'b', 'c']]
a
[1, [1, 2, 3, 'a', 'b', 'c'], 2, 3, ['a', 'b', 'c']]
======================================
# a_list = [1,2,3], b_list = ["test", "abcd"]
a_list = [1,2,3]
b_list = ["test", "abcd"]
# a_list에 b_list를 추가하세요
a_list.extend(b_list)
print(a_list, "\t", b_list)
# a_list에 b_list를 append로 추가하세요
a_list.append(b_list)
print(a_list, "\t", b_list)
# 추가된 a_list에서 "abcd"를 출력 하세요 -> index를 이용하여
print(a_list[-1][-1])
# b_list에서 "test" 앞에  "name"을 추가 하세요
b_list.insert(0,'name')
print(b_list)
# a_list의 두번째 요소를 'change'로 변경하세요
a_list[1] = 'change'
# a_list와 b_list를 출력해 보세요
print("a : ", a_list, "\n", "b : ", b_list)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[1, 2, 3, 'test', 'abcd'] 	 ['test', 'abcd']
[1, 2, 3, 'test', 'abcd', ['test', 'abcd']] 	 ['test', 'abcd']
abcd
['name', 'test', 'abcd']
a :  [1, 'change', 3, 'test', 'abcd', ['name', 'test', 'abcd']] 
 b :  ['name', 'test', 'abcd']

